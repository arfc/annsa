import numpy as np
import pandas as pd


def polynomial(coeffs, domain):
    """
    Returns a float value produced by a polynomial.

    Parameters:
    -----------
    coeffs : list tuple
    A list of (a,b) where a is the coefficient
    and b is the shift.
    """
    const = coeffs[0]  # first value is a constant, degree 0
    data = []
    for x in domain:
        value = 0
        for degree in range(1, len(coeffs)):
            a = coeffs[degree][0]
            b = coeffs[degree][1]
            var = (x - b) ** degree
            value += a * var
        data.append(value + const)
    return data


def gen_coeffs(degree):
    """
    Returns a list of tuples (a,b),
    where a is the coefficient and b is the shift.
    """
    coeffs = []
    for deg in range(degree + 1):
        a = np.random.uniform(-1, 1, 2)
        coeffs.append(a)
    return coeffs


def gen_rand_polynomial(x):
    """
    Returns a float generated by a random polynomial, given a domain, x.
    """
    # choose the degree
    degree = np.random.randint(10)
    # generate coefficients
    coef = gen_coeffs(degree)
    # generate the polynomial
    p = polynomial(coef, x)

    return p, degree


def gen_poly_data(x, num_cycles=1000):
    """
    Generates randomized polynomial data and keys containing the degree.
    """
    data = []
    keys = []

    for polynomial in range(num_cycles):
        p, degree = gen_rand_polynomial(x)
        keys.append(str(degree))
        data.append(p)

    return keys, data


def create_dataframe(keys, data):
    df = pd.DataFrame({'keys': keys, 'data': data})
    return df


def gen_random_data():
    funcs = [np.cos, np.sin]
    choice = np.random.randint(0, 2)
    func = funcs[choice]

    x = np.linspace(0, 2 * np.pi, 100)
    noise = np.random.uniform(0, 0.5, 100)
    data = func(x)

    if choice == 0:
        name = 'cos'
    else:
        name = 'sin'

    return name, (data + noise)

dataset = [[], []]
for x in range(1000):
    name, data = gen_random_data()
    dataset[0].append(name)
    dataset[1].append(data)

df = pd.DataFrame({'function': dataset[0], 'data': dataset[1]})
df.to_csv("noisy_sinusoidal_data.csv")

