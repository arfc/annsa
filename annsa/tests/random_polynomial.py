import matplotlib.pyplot as plt 
import numpy as np
import pandas as pd



def polynomial(coeffs, domain):
  """
  Returns a float value produced by a polynomial.
  
  Parameters:
  -----------
  coeffs : list tuple
    A list of (a,b) where a is the coefficient 
    and b is the shift. 
  """
  const = coeffs[0] #first value is a constant, degree 0
  data = []
  for x in domain:
    value = 0
    for degree in range(1, len(coeffs)):
      a = coeffs[degree][0]
      b = coeffs[degree][1]
#       print(a)
      var = (x-b)**degree
#       print(x, "^", degree, "=", var)
#       print(a, "*", var, "=", a*var)
      value += a * var
    data.append(value+const)
  return data


def gen_coeffs(degree):
  """
  Returns a list of tuples (a,b), where a is the coefficient and b is the shift.
  """
  coeffs = []
  for deg in range(degree+1):
    
    #Generate tuple
    a = np.random.uniform(-1,1,2)
    coeffs.append(a)
    
  return coeffs
  
def gen_rand_polynomial(x):
  """
  Returns a float generated by a random polynomial, given a domain, x.
  """
  #choose the degree
  degree = np.random.randint(10)
  #generate coefficients
  coef = gen_coeffs(degree)
  #generate the polynomial
  p = polynomial(coef, x)
  
  return p, degree
  
  
def gen_poly_data(x, num_cycles = 1000):
  """
  Generates randomized polynomial data and keys containing the degree. 
  """
  data=[]
  keys=[]
  
  for polynomial in range(num_cycles):
    p, degree = gen_rand_polynomial(x)
    keys.append(str(degree))
    data.append(p)
    
  return keys, data


def create_dataframe(keys, data):
  df = pd.DataFrame({'keys':keys, 'data':data})
  return df
  

x = np.arange(0,1024,1)
keys,data=gen_poly_data(x,1)
df = create_dataframe(keys, data)
print(df)
plt.plot(x, data[0])
plt.show()





